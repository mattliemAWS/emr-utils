#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #server {
        #listen       80;
        #server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
            #root   html;
            #index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
            #root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    upstream notebook {
        server localhost:9547;
    }

    # HTTPS server
    #
    server {

        listen 18888 ssl;
        ssl_certificate /etc/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/ssl/certs/nginx.key;
        ssl_protocols TLSv1.2;

        server_name localhost;

        location /webhdfs/v1/user {
          proxy_pass    http://ip-172-31-49-97.ec2.internal:14000;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /sessions {
          proxy_pass    http://localhost:8998;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /batches {
          proxy_pass    http://localhost:8998;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }
        location /proxy {
          proxy_pass    http://ip-172-31-49-97.ec2.internal:20888;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /api/kernels {
          proxy_pass    http://localhost:9547;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /api/sessions {
          proxy_pass    http://localhost:9547;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /api/kernelspecs {
          proxy_pass    http://localhost:9547;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /kernelspecs {
          proxy_pass    http://localhost:9547;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location ~* /(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/? {
                proxy_pass            http://notebook;
                proxy_set_header      Host $host;
                # websocket support
                proxy_http_version    1.1;
                proxy_set_header      Upgrade "websocket";
                proxy_set_header      Connection "Upgrade";
                proxy_read_timeout    86400;
        }

        location /emr/kernelmeta {
          proxy_pass    http://localhost:7780;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }

        location /emr/clusterconfig {
          proxy_pass    http://localhost:7780;
          proxy_read_timeout 1800;
          proxy_connect_timeout 1800;
        }
    }

  server {
      listen 18899;
      server_name  localhost;

      location / {
        root   html;
        index  index.html index.htm;
      }

      location /proxy {
        proxy_pass    http://ip-172-31-49-97.ec2.internal:20888;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_redirect http://ip-172-31-49-97.ec2.internal:18080/history/ /shs/history/;
        proxy_redirect http://ip-172-31-49-97.ec2.internal:8080/ /tez/;
        proxy_redirect http://ip-172-31-49-97.ec2.internal:8088/cluster/ /cluster/;
      }

      location ~ ^(?<prefix>/history$) {
        return 302 $scheme://$host:$server_port$prefix/;
      }

      location /jh/ {
        proxy_pass    http://ip-172-31-49-97.ec2.internal:19888/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
      }

      location ~* ^(?<prefix>/shs$) {
        return 302 $scheme://$host:$server_port$prefix/;
      }

      location ~* ^(\/nm\/(?<nodeAddress>.*:8042)\/(?<url>.*)$) {
        resolver 172.31.0.2;
        resolver_timeout 2s;
        proxy_pass http://$nodeAddress/$url$is_args$args;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_set_header Accept-Encoding "";
        proxy_redirect http://ip-172-31-49-97.ec2.internal:19888/ /jh/;
        proxy_redirect ~*http(s)?:\/\/(.*:8042)\/(.*) /nm/$2/$3;
        sub_filter_once off;
        sub_filter_types *;
        sub_filter http://ip-172-31-49-97.ec2.internal:8088 /rm/;
        sub_filter /node/ /nm/$nodeAddress/node/;
        sub_filter /conf /nm/$nodeAddress/conf;
        sub_filter /logs /nm/$nodeAddress/logs;
        sub_filter /stacks /nm/$nodeAddress/stacks;
        sub_filter /jmx?qry=Hadoop:* /nm/$nodeAddress/jmx?qry=Hadoop:*;
      }

      location /shs/ {
        proxy_pass http://ip-172-31-49-97.ec2.internal:18080/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_set_header Accept-Encoding "";
        proxy_redirect http://ip-172-31-49-97.ec2.internal:18080/history/ /shs/history/;
      }

      location /static/ {
        proxy_pass    http://ip-172-31-49-97.ec2.internal:19888/static/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
      }

      location /applicationhistory/ {
        rewrite /applicationhistory/ /yts/applicationhistory/;
      }

      location /yts/ {
        proxy_pass    http://ip-172-31-49-97.ec2.internal:8188/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_set_header Accept-Encoding "";
      }

      location /rm/ {
        proxy_pass	http://ip-172-31-49-97.ec2.internal:8088/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_set_header Accept-Encoding "";
        proxy_redirect http://ip-172-31-49-97.ec2.internal:19888/ /jh/;
        proxy_redirect http://ip-172-31-49-97.ec2.internal:8088/ /rm/;
      }

      location ~* ^/cluster/(?<url>.*) {
        return 302 /rm/cluster/$url;
      }

      location /tez/ {
        proxy_pass    http://ip-172-31-49-97.ec2.internal:8080/;
        proxy_read_timeout 25;
        proxy_connect_timeout 20;
        proxy_set_header Accept-Encoding "";
        sub_filter_once off;
        sub_filter_types *;
        sub_filter http://ip-172-31-49-97.ec2.internal:8188 /yts;
        sub_filter http://ip-172-31-49-97.ec2.internal:8088 /rm;
        sub_filter '"http://ip-172-31-49-97.ec2.internal:20888"' '"/proxy"';
        sub_filter 'proxy/{app_id}' '{app_id}';
        sub_filter 'href: logs' 'href: "/nm/" + logs.substring(logs.indexOf("://")+3)';
        sub_filter "return yarnProtocol + '://' + logURL" "return '/nm/' + logURL";
        sub_filter 'this.normalizeURL(this.get("env.app.hosts.timeline"))' 'location.origin + this.normalizeURL(this.get("env.app.hosts.timeline")).replace(location.protocol + "///", "/")';
        sub_filter 'this.normalizeURL(this.get("env.app.hosts.rm"))' 'location.origin + this.normalizeURL(this.get("env.app.hosts.rm")).replace(location.protocol + "///", "/")';
        sub_filter 'this.normalizeURL(url)' 'location.origin + this.normalizeURL(url).replace(location.protocol + "///", "/")';
    }
  }
}
